!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).MSHParserLib={})}(this,(function(e){"use strict";function t(e){return new s(e)}function r(e,r){if("string"==typeof e)if("undefined"!=typeof window){const s=new XMLHttpRequest;s.open("GET",e,!0),s.responseType="arraybuffer",s.onload=()=>{const e=t(s.response);r(e)},s.send()}else import("fs").then((s=>{const o=s.readFileSync(e);r(t(o))}));else{const s=new FileReader;s.onload=()=>{const e=t(s.result);r(e)},s.readAsArrayBuffer(e)}}class s{constructor(e){this._offset=0;const t=e.buffer?new Uint8Array(e).buffer:e,r=new DataView(t),o=new Uint8Array(r.buffer);"$MeshFormat"!==this._parseNextLineAsUTF8(o)&&s._throwInvalidFormatError();const[n,i,h]=this._parseNextLineAsUTF8(o).split(" ").map((e=>parseFloat(e)));if((isNaN(n)||isNaN(i)||isNaN(h))&&s._throwInvalidFormatError(),8!==h&&4!==h)throw new Error(`msh-parser: This library currently parses .msh files with data size === 8 or 4.  Current file has data size = ${h}. Please submit an issue to the GitHub repo if you encounter this error and attach a sample file.`);const a=8===h,l=1===i;let f=!1;l&&(1===r.getInt32(this._offset,!0)&&(f=!0),this._offset+=4),"$EndMeshFormat"!==this._parseNextLineAsUTF8(o)&&s._throwInvalidFormatError(),"$Nodes"!==this._parseNextLineAsUTF8(o)&&s._throwInvalidFormatError();const d=parseInt(this._parseNextLineAsUTF8(o)),m=a?new Float64Array(3*d):new Float32Array(3*d);if(!l)throw new Error("msh-parser: This library does not currently parse non-binary .msh files.  Please submit an issue to the GitHub repo if you encounter this error and attach a sample file.");for(let e=0;e<d;e++){const e=r.getInt32(this._offset,f)-1;a?(m[3*e]=r.getFloat64(this._offset+4,f),m[3*e+1]=r.getFloat64(this._offset+4+h,f),m[3*e+2]=r.getFloat64(this._offset+4+2*h,f)):(m[3*e]=r.getFloat32(this._offset+4,f),m[3*e+1]=r.getFloat32(this._offset+4+h,f),m[3*e+2]=r.getFloat32(this._offset+4+2*h,f)),this._offset+=4+3*h}for(let e=0;e<m.length;e++)if(!s._isFiniteNumber(m[e]))throw new Error("msh-parser: NaN or Inf detected in input file.");"$EndNodes"!==this._parseNextLineAsUTF8(o)&&s._throwInvalidFormatError(),this._nodes=m,"$Elements"!==this._parseNextLineAsUTF8(o)&&s._throwInvalidFormatError();const c=parseInt(this._parseNextLineAsUTF8(o)),u=[];for(let e=0;e<c;e++)u.push([]);this.elements=u;let _=!0,p=0,w=!1;if(!l)throw new Error("msh-parser: This library does not currently parse non-binary .msh files.  Please submit an issue to the GitHub repo if you encounter this error and attach a sample file.");for(;p<c;){const e=r.getInt32(this._offset,f),t=r.getInt32(this._offset+4,f),o=r.getInt32(this._offset+8,f);4!==e&&(_=!1);const n=s._numNodesPerElementType(e);this._offset+=12;for(let e=0;e<t;e++){const e=r.getInt32(this._offset,f)-1;if(e<0||e>=c)throw new Error(`msh-parser: Invalid element index ${e} for numElements === ${c}.`);this._offset+=4;for(let e=0;e<o;e++)w||(w=!0,console.warn("msh-parser: This library does not currently parse element tags.")),this._offset+=4;const t=u[e];for(let e=0;e<n;e++){const e=r.getInt32(this._offset,f)-1;if(!s._isFiniteNumber(e))throw new Error("msh-parser: NaN or Inf detected in input file.");if(e<0||e>=d)throw new Error(`msh-parser: Invalid node index ${e} for numNodes === ${d}.`);t.push(e),this._offset+=4}}p+=t}if("$EndElements"!==this._parseNextLineAsUTF8(o)&&s._throwInvalidFormatError(),this.isTetMesh=_,_){const e={};for(let t=0;t<c;t++){const r=u[t];for(let t=0;t<r.length;t++){const o=s._makeTriHash(r[t],r[(t+1)%4],r[(t+2)%4]);if(e[o]){if(e[o].push(r[(t+3)%r.length]),e[o].length>2)throw new Error(`msh-parser: Hit face ${o} more than twice.`)}else e[o]=[r[(t+3)%4]]}}const t=Object.keys(e),r=[],o=new Uint8Array(d);for(let n=0,i=t.length;n<i;n++){const i=t[n];if(1!==e[i].length)continue;const h=t[n].split(","),a=parseInt(h[0]),l=parseInt(h[1]),f=parseInt(h[2]),d=e[i][0],c=s._dotProduct(s._crossProduct(s._vecFromTo(a,l,m),s._vecFromTo(a,f,m)),s._vecFromTo(a,d,m));r.push(c<0?[a,l,f]:[a,f,l]),o[a]=1,o[l]=1,o[f]=1}let n=0;const i=new Int32Array(d);for(let e=0;e<d;e++)o[e]&&(i[e]=n,n++);this._numExteriorNodes=n;for(let e=0;e<d;e++)o[e]||(i[e]=n,n++);const h=m.slice();for(let e=0;e<d;e++)for(let t=0;t<3;t++)h[3*i[e]+t]=m[3*e+t];this._nodes=h;for(let e=0;e<c;e++){const t=u[e];for(let e=0;e<t.length;e++)t[e]=i[t[e]]}for(let e=0;e<r.length;e++){const t=r[e];for(let e=0;e<t.length;e++)t[e]=i[t[e]]}this._exteriorFaces=r}}get nodes(){return this._nodes}set nodes(e){throw new Error("msh-parser: No nodes setter.")}_parseNextLineAsUTF8(e){const t=e.indexOf(10,this._offset),r=s.decoder.decode(e.subarray(this._offset,t));return this._offset=t+1,r}static _throwInvalidFormatError(){throw new Error("msh-parser: Invalid .msh file format.")}static _isFiniteNumber(e){return!isNaN(e)&&e!==1/0&&e!==-1/0}static _numNodesPerElementType(e){switch(e){case 2:return 3;case 3:case 4:return 4;case 5:return 8;default:throw new Error(`msh-parser: Element type ${e} is not supported yet.`)}}static _dotProduct(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static _crossProduct(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}static _vecFromTo(e,t,r){return[r[3*t]-r[3*e],r[3*t+1]-r[3*e+1],r[3*t+2]-r[3*e+2]]}static _makeTriHash(e,t,r){const s=Math.min(e,t,r),o=Math.max(e,t,r);return`${s},${e+t+r-s-o},${o}`}get edges(){if(!this._edges){const{elements:e,isTetMesh:t}=this;if(!t)throw new Error("msh-parser: MSHMesh.edges is not defined for non-tet meshes.");const r={},s=[];for(let t=0,o=e.length;t<o;t++){const o=e[t],n=o.length;for(let e=0;e<n;e++)for(let t=e+1;t<n;t++){const n=o[e],i=o[t],h=`${Math.min(n,i)},${Math.max(n,i)}`;void 0===r[h]&&(r[h]=!0,s.push(n,i))}}this._edges=new Uint32Array(s)}return this._edges}set edges(e){throw new Error("msh-parser: No edges setter.")}get exteriorEdges(){if(!this._exteriorEdges){const{isTetMesh:e,_exteriorFaces:t}=this;if(!e)throw new Error("msh-parser: MSHMesh.exteriorEdges is not defined for non-tet meshes.");const r=function(e){const{faceIndices:t}=e,r=t.length,s={},o=[];for(let e=0;e<r;e++){const r=t[e],n=r.length;for(let e=0;e<n;e++){const t=r[e],i=r[(e+1)%n],h=`${Math.min(t,i)},${Math.max(t,i)}`;void 0===s[h]&&(s[h]=!0,o.push(t,i))}}return o}({faceIndices:t});this._exteriorEdges=new Uint32Array(r)}return this._exteriorEdges}set exteriorEdges(e){throw new Error("msh-parser: No exteriorEdges setter.")}get exteriorFaces(){if(!this.isTetMesh||!this._exteriorFaces)throw new Error("msh-parser: MSHMesh.exteriorFaces is not defined for non-tet meshes.");return this._exteriorFaces}set exteriorFaces(e){throw new Error("msh-parser: No exteriorFaces setter.")}static _tetrahedronVolume(e,t){const[r,o,n,i]=e,h=s._vecFromTo(i,r,t),a=s._vecFromTo(i,o,t),l=s._vecFromTo(i,n,t);return Math.abs(s._dotProduct(h,s._crossProduct(a,l)))/6}get elementVolumes(){if(!this._elementVolumes){const{elements:e,nodes:t,isTetMesh:r}=this;if(!r)throw new Error("msh-parser: MSHMesh.elementVolumes is not defined for non-tet meshes.");const o=e.length,n=new Float32Array(o);for(let r=0;r<o;r++)n[r]=s._tetrahedronVolume(e[r],t);this._elementVolumes=n}return this._elementVolumes}set elementVolumes(e){throw new Error("msh-parser: No elementVolumes setter.")}get nodalVolumes(){if(!this._nodalVolumes){const{elements:e,nodes:t,isTetMesh:r}=this;if(!r)throw new Error("msh-parser: MSHMesh.nodalVolumes is not defined for non-tet meshes.");const{elementVolumes:s}=this,o=new Float32Array(t.length/3);for(let t=0,r=e.length;t<r;t++){const r=e[t],n=r.length;for(let e=0;e<n;e++){o[r[e]]+=s[t]/n}}this._nodalVolumes=o}return this._nodalVolumes}set nodalVolumes(e){throw new Error("msh-parser: No nodalVolumes setter.")}get numExteriorNodes(){if(!this.isTetMesh||!this._numExteriorNodes)throw new Error("msh-parser: MSHMesh.numExteriorNodes is not defined for non-tet meshes.");return this._numExteriorNodes}set numExteriorNodes(e){throw new Error("msh-parser: No numExteriorNodes setter.")}get boundingBox(){return this._boundingBox||(this._boundingBox=function(e){const{vertices:t}=e,r=t.length/3,s=[1/0,1/0,1/0],o=[-1/0,-1/0,-1/0];for(let e=0;e<r;e++)s[0]=Math.min(s[0],t[3*e]),s[1]=Math.min(s[1],t[3*e+1]),s[2]=Math.min(s[2],t[3*e+2]),o[0]=Math.max(o[0],t[3*e]),o[1]=Math.max(o[1],t[3*e+1]),o[2]=Math.max(o[2],t[3*e+2]);return{min:s,max:o}}({vertices:this.nodes})),this._boundingBox}set boundingBox(e){throw new Error("msh-parser: No boundingBox setter.")}scaleNodesToUnitBoundingBox(){return function(e,t=e.vertices){const{vertices:r,boundingBox:s}=e,{min:o,max:n}=s,i=[n[0]-o[0],n[1]-o[1],n[2]-o[2]],h=[(n[0]+o[0])/2,(n[1]+o[1])/2,(n[2]+o[2])/2],a=Math.max(i[0],i[1],i[2]),l=r.length/3;for(let e=0;e<l;e++)for(let s=0;s<3;s++)t[3*e+s]=(r[3*e+s]-h[s])/a}({vertices:this.nodes,boundingBox:this.boundingBox}),delete this._boundingBox,delete this._nodalVolumes,delete this._elementVolumes,this}}s.decoder=new TextDecoder,e.loadMsh=r,e.loadMshAsync=function(e){return new Promise((t=>{r(e,(e=>{t(e)}))}))},e.parseMsh=t}));
//# sourceMappingURL=msh-parser.min.js.map
