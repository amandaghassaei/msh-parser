!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).MSHParserLib={})}(this,(function(e){"use strict";function t(e,t){return`${Math.min(e,t)},${Math.max(e,t)}`}function s(e,t,s){const r=Math.min(e,t,s),o=Math.max(e,t,s);return`${r},${e+t+s-r-o},${o}`}function r(e){return new n(e)}function o(e,t){if("string"==typeof e)if("undefined"!=typeof window){const s=new XMLHttpRequest;s.open("GET",e,!0),s.responseType="arraybuffer",s.onload=()=>{const e=r(s.response);t(e)},s.send()}else import("fs").then((s=>{const o=s.readFileSync(e);t(r(o))}));else{const s=new FileReader;s.onload=()=>{const e=r(s.result);t(e)},s.readAsArrayBuffer(e)}}class n{constructor(e){this._offset=0;const t=e.buffer?new Uint8Array(e).buffer:e,r=new DataView(t),o=new Uint8Array(r.buffer);"$MeshFormat"!==this._parseNextLineAsUTF8(o)&&n._throwInvalidFormatError();const[i,h,a]=this._parseNextLineAsUTF8(o).split(" ").map((e=>parseFloat(e)));if((isNaN(i)||isNaN(h)||isNaN(a))&&n._throwInvalidFormatError(),8!==a&&4!==a)throw new Error(`msh-parser: This library currently parses .msh files with data size === 8 or 4.  Current file has data size = ${a}. Please submit an issue to the GitHub repo if you encounter this error and attach a sample file.`);const d=8===a,l=1===h;let f=!1;l&&(1===r.getInt32(this._offset,!0)&&(f=!0),this._offset+=4),"$EndMeshFormat"!==this._parseNextLineAsUTF8(o)&&n._throwInvalidFormatError(),"$Nodes"!==this._parseNextLineAsUTF8(o)&&n._throwInvalidFormatError();const c=parseInt(this._parseNextLineAsUTF8(o)),m=d?new Float64Array(3*c):new Float32Array(3*c);if(!l)throw new Error("msh-parser: This library does not currently parse non-binary .msh files.  Please submit an issue to the GitHub repo if you encounter this error and attach a sample file.");for(let e=0;e<c;e++){const e=r.getInt32(this._offset,f)-1;d?(m[3*e]=r.getFloat64(this._offset+4,f),m[3*e+1]=r.getFloat64(this._offset+4+a,f),m[3*e+2]=r.getFloat64(this._offset+4+2*a,f)):(m[3*e]=r.getFloat32(this._offset+4,f),m[3*e+1]=r.getFloat32(this._offset+4+a,f),m[3*e+2]=r.getFloat32(this._offset+4+2*a,f)),this._offset+=4+3*a}for(let e=0;e<m.length;e++)if(!n._isFiniteNumber(m[e]))throw new Error("msh-parser: NaN or Inf detected in input file.");"$EndNodes"!==this._parseNextLineAsUTF8(o)&&n._throwInvalidFormatError(),this._nodes=m,"$Elements"!==this._parseNextLineAsUTF8(o)&&n._throwInvalidFormatError();const u=parseInt(this._parseNextLineAsUTF8(o)),_=[];for(let e=0;e<u;e++)_.push([]);this.elementIndices=_;let p=!0,w=0,g=!1;if(!l)throw new Error("msh-parser: This library does not currently parse non-binary .msh files.  Please submit an issue to the GitHub repo if you encounter this error and attach a sample file.");for(;w<u;){const e=r.getInt32(this._offset,f),t=r.getInt32(this._offset+4,f),s=r.getInt32(this._offset+8,f);4!==e&&(p=!1);const o=n._numNodesPerElementType(e);this._offset+=12;for(let e=0;e<t;e++){const e=r.getInt32(this._offset,f)-1;if(e<0||e>=u)throw new Error(`msh-parser: Invalid element index ${e} for numElements === ${u}.`);this._offset+=4;for(let e=0;e<s;e++)g||(g=!0,console.warn("msh-parser: This library does not currently parse element tags.")),this._offset+=4;const t=_[e];for(let e=0;e<o;e++){const e=r.getInt32(this._offset,f)-1;if(!n._isFiniteNumber(e))throw new Error("msh-parser: NaN or Inf detected in input file.");if(e<0||e>=c)throw new Error(`msh-parser: Invalid node index ${e} for numNodes === ${c}.`);t.push(e),this._offset+=4}}w+=t}if("$EndElements"!==this._parseNextLineAsUTF8(o)&&n._throwInvalidFormatError(),this.isTetMesh=p,p){const e={};for(let t=0;t<u;t++){const r=_[t];for(let t=0;t<r.length;t++){const o=s(r[t],r[(t+1)%4],r[(t+2)%4]);if(e[o]){if(e[o].push(r[(t+3)%r.length]),e[o].length>2)throw new Error(`msh-parser: Hit face ${o} more than twice.`)}else e[o]=[r[(t+3)%4]]}}const t=Object.keys(e),r=[],o=new Uint8Array(c);for(let s=0,i=t.length;s<i;s++){const i=t[s];if(1!==e[i].length)continue;const h=t[s].split(","),a=parseInt(h[0]),d=parseInt(h[1]),l=parseInt(h[2]),f=e[i][0],c=n._dotProduct(n._crossProduct(n._vecFromTo(a,d,m),n._vecFromTo(a,l,m)),n._vecFromTo(a,f,m));r.push(c<0?[a,d,l]:[a,l,d]),o[a]=1,o[d]=1,o[l]=1}let i=0;const h=new Int32Array(c);for(let e=0;e<c;e++)o[e]&&(h[e]=i,i++);this._numExteriorNodes=i;for(let e=0;e<c;e++)o[e]||(h[e]=i,i++);const a=m.slice();for(let e=0;e<c;e++)for(let t=0;t<3;t++)a[3*h[e]+t]=m[3*e+t];this._nodes=a;for(let e=0;e<u;e++){const t=_[e];for(let e=0;e<t.length;e++)t[e]=h[t[e]]}for(let e=0;e<r.length;e++){const t=r[e];for(let e=0;e<t.length;e++)t[e]=h[t[e]]}this._exteriorFacesIndices=r}}get nodes(){return this._nodes}set nodes(e){throw new Error("msh-parser: No nodes setter.")}_parseNextLineAsUTF8(e){const t=e.indexOf(10,this._offset),s=n.decoder.decode(e.subarray(this._offset,t));return this._offset=t+1,s}static _throwInvalidFormatError(){throw new Error("msh-parser: Invalid .msh file format.")}static _isFiniteNumber(e){return!isNaN(e)&&e!==1/0&&e!==-1/0}static _numNodesPerElementType(e){switch(e){case 2:return 3;case 3:case 4:return 4;case 5:return 8;default:throw new Error(`msh-parser: Element type ${e} is not supported yet.`)}}static _dotProduct(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}static _crossProduct(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}static _vecFromTo(e,t,s){return[s[3*t]-s[3*e],s[3*t+1]-s[3*e+1],s[3*t+2]-s[3*e+2]]}get edgesIndices(){if(!this._edgesIndices){const{elementIndices:e,isTetMesh:s}=this;if(!s)throw new Error("msh-parser: MSHMesh.edgesIndices is not defined for non-tet meshes.");const r={},o=[];for(let s=0,n=e.length;s<n;s++){const n=e[s],i=n.length;for(let e=0;e<i;e++)for(let s=e+1;s<i;s++){const i=n[e],h=n[s],a=t(i,h);void 0===r[a]&&(r[a]=!0,o.push(i,h))}}this._edgesIndices=new Uint32Array(o)}return this._edgesIndices}set edgesIndices(e){throw new Error("msh-parser: No edgesIndices setter.")}get exteriorEdgesIndices(){if(!this._exteriorEdgesIndices){const{isTetMesh:e,_exteriorFacesIndices:s}=this;if(!e)throw new Error("msh-parser: MSHMesh.exteriorEdgesIndices is not defined for non-tet meshes.");const r=function(e){const{facesIndices:s}=e,r=s.length,o={},n=[];for(let e=0;e<r;e++){const r=s[e],i=r.length;for(let e=0;e<i;e++){const s=r[e],h=r[(e+1)%i],a=t(s,h);void 0===o[a]&&(o[a]=!0,n.push(s,h))}}return n}({facesIndices:s});this._exteriorEdgesIndices=new Uint32Array(r)}return this._exteriorEdgesIndices}set exteriorEdgesIndices(e){throw new Error("msh-parser: No exteriorEdgesIndices setter.")}get exteriorFacesIndices(){if(!this.isTetMesh||!this._exteriorFacesIndices)throw new Error("msh-parser: MSHMesh.exteriorFacesIndices is not defined for non-tet meshes.");return this._exteriorFacesIndices}set exteriorFacesIndices(e){throw new Error("msh-parser: No exteriorFacesIndices setter.")}static _tetrahedronVolume(e,t){const[s,r,o,i]=e,h=n._vecFromTo(i,s,t),a=n._vecFromTo(i,r,t),d=n._vecFromTo(i,o,t);return Math.abs(n._dotProduct(h,n._crossProduct(a,d)))/6}get elementVolumes(){if(!this._elementVolumes){const{elementIndices:e,nodes:t,isTetMesh:s}=this;if(!s)throw new Error("msh-parser: MSHMesh.elementVolumes is not defined for non-tet meshes.");const r=e.length,o=new Float32Array(r);for(let s=0;s<r;s++)o[s]=n._tetrahedronVolume(e[s],t);this._elementVolumes=o}return this._elementVolumes}set elementVolumes(e){throw new Error("msh-parser: No elementVolumes setter.")}get nodalVolumes(){if(!this._nodalVolumes){const{elementIndices:e,nodes:t,isTetMesh:s}=this;if(!s)throw new Error("msh-parser: MSHMesh.nodalVolumes is not defined for non-tet meshes.");const{elementVolumes:r}=this,o=new Float32Array(t.length/3);for(let t=0,s=e.length;t<s;t++){const s=e[t],n=s.length;for(let e=0;e<n;e++){o[s[e]]+=r[t]/n}}this._nodalVolumes=o}return this._nodalVolumes}set nodalVolumes(e){throw new Error("msh-parser: No nodalVolumes setter.")}get numExteriorNodes(){if(!this.isTetMesh||!this._numExteriorNodes)throw new Error("msh-parser: MSHMesh.numExteriorNodes is not defined for non-tet meshes.");return this._numExteriorNodes}set numExteriorNodes(e){throw new Error("msh-parser: No numExteriorNodes setter.")}get boundingBox(){return this._boundingBox||(this._boundingBox=function(e){const{vertices:t}=e,s=t.length/3,r=[1/0,1/0,1/0],o=[-1/0,-1/0,-1/0];for(let e=0;e<s;e++)r[0]=Math.min(r[0],t[3*e]),r[1]=Math.min(r[1],t[3*e+1]),r[2]=Math.min(r[2],t[3*e+2]),o[0]=Math.max(o[0],t[3*e]),o[1]=Math.max(o[1],t[3*e+1]),o[2]=Math.max(o[2],t[3*e+2]);return{min:r,max:o}}({vertices:this.nodes})),this._boundingBox}set boundingBox(e){throw new Error("msh-parser: No boundingBox setter.")}scaleNodesToUnitBoundingBox(){return function(e,t=e.vertices){const{vertices:s,boundingBox:r}=e,{min:o,max:n}=r,i=[n[0]-o[0],n[1]-o[1],n[2]-o[2]],h=[(n[0]+o[0])/2,(n[1]+o[1])/2,(n[2]+o[2])/2],a=Math.max(i[0],i[1],i[2]),d=s.length/3;for(let e=0;e<d;e++)for(let r=0;r<3;r++)t[3*e+r]=(s[3*e+r]-h[r])/a}({vertices:this.nodes,boundingBox:this.boundingBox}),delete this._boundingBox,delete this._nodalVolumes,delete this._elementVolumes,this}}n.decoder=new TextDecoder,e.loadMSH=o,e.loadMSHAsync=function(e){return new Promise((t=>{o(e,(e=>{t(e)}))}))},e.parseMSH=r}));
//# sourceMappingURL=msh-parser.min.js.map
